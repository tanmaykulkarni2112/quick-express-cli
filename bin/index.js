#!/usr/bin/env node

import fs from "fs";
import path from "path";
import chalk from "chalk";
import inquirer from "inquirer";
import { exec } from "child_process";

// import templates
import { basicTemplate } from "./templates/basicTemplate.js";
import { serverCode2, routerCode2 } from "./templates/router.template.js";
import {
  routerCode3,
  controllerCode3,
} from "./templates/routerController.template.js";

// import TypeScript templates
import { basicTemplateTS } from "./templates/basicTemplate.ts";
import { serverCode2TS, routerCode2TS } from "./templates/router.template.ts";
import {
  routerCode3TS,
  controllerCode3TS,
} from "./templates/routerController.template.ts";

async function createPackageJson(useTypeScript = false) {
  const packageJsonPath = path.join(process.cwd(), "package.json");
  if (!fs.existsSync(packageJsonPath)) {
    const fileExtension = useTypeScript ? ".ts" : ".js";
    const mainFile = `server.template${fileExtension}`;
    
    const pkgJson = {
      name: path.basename(process.cwd()),
      version: "1.0.0",
      description: "Generated by express-scaffold CLI",
      main: mainFile,
      scripts: useTypeScript ? {
        start: "ts-node server.template.ts",
        dev: "ts-node --watch server.template.ts",
        build: "tsc",
        "start:prod": "node dist/server.template.js"
      } : {
        start: `node ${mainFile}`,
      },
      dependencies: {
        express: "^5.1.0",
        chalk: "^5.6.2",
        dotenv: "^17.2.3",
        ...(useTypeScript && {
          "@types/express": "^4.17.21",
          "@types/node": "^20.10.0",
          "ts-node": "^10.9.1",
          "typescript": "^5.3.0"
        })
      },
    };
    fs.writeFileSync(
      packageJsonPath,
      JSON.stringify(pkgJson, null, 2),
      "utf-8"
    );
    console.log(chalk.blue("Created package.json"));
  } else {
    console.log(chalk.yellow("package.json already exists, skipping creation"));
  }
}

function runNpmInstall() {
  return new Promise((resolve, reject) => {
    console.log(chalk.blue("Running npm install..."));
    exec("npm install", (error, stdout, stderr) => {
      if (error) {
        console.error(chalk.red(`npm install failed: ${error.message}`));
        reject(error);
        return;
      }
      if (stderr) {
        console.error(chalk.red(`npm install stderr: ${stderr}`));
      }
      console.log(stdout);
      console.log(chalk.green("Project setup complete!"));
      resolve();
    });
  });
}

async function createEnvFile() {
  const envPath = path.join(process.cwd(), ".env");
  if (!fs.existsSync(envPath)) {
    const envContent = `PORT=3000\n`;
    fs.writeFileSync(envPath, envContent, "utf-8");
    console.log(chalk.blue("Created .env file"));
  } else {
    console.log(chalk.yellow(".env file already exists, skipping creation"));
  }
}

async function createTsConfig() {
  const tsConfigPath = path.join(process.cwd(), "tsconfig.json");
  if (!fs.existsSync(tsConfigPath)) {
    const tsConfig = {
      "compilerOptions": {
        "target": "ES2020",
        "module": "ESNext",
        "moduleResolution": "node",
        "esModuleInterop": true,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "skipLibCheck": true,
        "forceConsistentCasingInFileNames": true,
        "outDir": "./dist",
        "rootDir": "./",
        "declaration": true,
        "declarationMap": true,
        "sourceMap": true
      },
      "include": [
        "**/*.ts"
      ],
      "exclude": [
        "node_modules",
        "dist"
      ]
    };
    fs.writeFileSync(
      tsConfigPath,
      JSON.stringify(tsConfig, null, 2),
      "utf-8"
    );
    console.log(chalk.blue("Created tsconfig.json"));
  } else {
    console.log(chalk.yellow("tsconfig.json already exists, skipping creation"));
  }
}

async function main() {
  const answers = await inquirer.prompt([
    {
      type: "list",
      name: "choice",
      message: "What would you like to generate:",
      choices: [
        "Basic express template",
        "Express template with router",
        "Express template with router and controllers",
      ],
    },
    {
      type: "confirm",
      name: "useTypeScript",
      message: "Would you like to use TypeScript?",
      default: false,
    },
  ]);

  const choice = answers.choice;
  const useTypeScript = answers.useTypeScript;
  const fileExtension = useTypeScript ? ".ts" : ".js";

  if (choice === "Basic express template") {
    const fileName = `server.template${fileExtension}`;
    const filePath = path.join(process.cwd(), fileName);
    const content = useTypeScript ? basicTemplateTS : basicTemplate;

    fs.writeFileSync(filePath, content);
    console.log(chalk.green(`Basic express template created! (${useTypeScript ? 'TypeScript' : 'JavaScript'})`));
  }

  if (choice === "Express template with router") {
    const serverFile = `server.template${fileExtension}`;
    const routerFile = `router${fileExtension}`;
    const routeFolder = "routes";

    const serverFilePath = path.join(process.cwd(), serverFile);
    const routeFolderPath = path.join(process.cwd(), routeFolder);
    const routerFilePath = path.join(routeFolderPath, routerFile);

    const serverContent = useTypeScript ? serverCode2TS : serverCode2;
    const routerContent = useTypeScript ? routerCode2TS : routerCode2;

    fs.writeFileSync(serverFilePath, serverContent);

    if (!fs.existsSync(routeFolderPath)) {
      fs.mkdirSync(routeFolderPath, { recursive: true });
    }

    fs.writeFileSync(routerFilePath, routerContent);

    console.log(chalk.green(`Express template with router created! (${useTypeScript ? 'TypeScript' : 'JavaScript'})`));
  }

  if (choice === "Express template with router and controllers") {
    const serverFile = `server.template${fileExtension}`;
    const routerFile = `router${fileExtension}`;
    const routeFolder = "routes";
    const controllerFile = `routeController${fileExtension}`;
    const controllerFolder = "controllers";

    const serverFilePath = path.join(process.cwd(), serverFile);
    const routeFolderPath = path.join(process.cwd(), routeFolder);
    const controllerFolderPath = path.join(process.cwd(), controllerFolder);
    const routerFilePath = path.join(routeFolderPath, routerFile);
    const controllerFilePath = path.join(controllerFolderPath, controllerFile);

    const serverContent = useTypeScript ? serverCode2TS : serverCode2;
    const routerContent = useTypeScript ? routerCode3TS : routerCode3;
    const controllerContent = useTypeScript ? controllerCode3TS : controllerCode3;

    fs.writeFileSync(serverFilePath, serverContent);

    if (!fs.existsSync(routeFolderPath)) {
      fs.mkdirSync(routeFolderPath, { recursive: true });
    }

    if (!fs.existsSync(controllerFolderPath)) {
      fs.mkdirSync(controllerFolderPath, { recursive: true });
    }

    fs.writeFileSync(routerFilePath, routerContent);
    fs.writeFileSync(controllerFilePath, controllerContent);

    console.log(
      chalk.green(`Express template with router and controllers created! (${useTypeScript ? 'TypeScript' : 'JavaScript'})`)
    );
  }

  // Create package.json if not exists
  await createPackageJson(useTypeScript);

  // Run npm install
  await runNpmInstall();

  // Create .env if not exists
  await createEnvFile();

  // Create tsconfig.json if TypeScript is selected
  if (useTypeScript) {
    await createTsConfig();
  }
}

main();

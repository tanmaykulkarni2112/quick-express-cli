#!/usr/bin/env node

import fs from "fs";
import path from "path";
import chalk from "chalk";
import inquirer from "inquirer";
import { exec } from "child_process";

// import templates
import { basicTemplate } from "./templates/basicTemplate.js";
import { serverCode2, routerCode2 } from "./templates/router.template.js";
import {
  routerCode3,
  controllerCode3,
} from "./templates/routerController.template.js";

async function createPackageJson() {
  const packageJsonPath = path.join(process.cwd(), "package.json");
  if (!fs.existsSync(packageJsonPath)) {
    const pkgJson = {
      name: path.basename(process.cwd()),
      version: "1.0.0",
      description: "Generated by express-scaffold CLI",
      main: "server.template.js",
      scripts: {
        start: "node server.template.js",
      },
      dependencies: {
        express: "^5.1.0",
        chalk: "^5.6.2",
        dotenv: "^17.2.3",
      },
    };
    fs.writeFileSync(
      packageJsonPath,
      JSON.stringify(pkgJson, null, 2),
      "utf-8"
    );
    console.log(chalk.blue("Created package.json"));
  } else {
    console.log(chalk.yellow("package.json already exists, skipping creation"));
  }
}

function runNpmInstall() {
  return new Promise((resolve, reject) => {
    console.log(chalk.blue("Running npm install..."));
    exec("npm install", (error, stdout, stderr) => {
      if (error) {
        console.error(chalk.red(`npm install failed: ${error.message}`));
        reject(error);
        return;
      }
      if (stderr) {
        console.error(chalk.red(`npm install stderr: ${stderr}`));
      }
      console.log(stdout);
      console.log(chalk.green("Project setup complete!"));
      resolve();
    });
  });
}

async function createEnvFile() {
  const envPath = path.join(process.cwd(), ".env");
  if (!fs.existsSync(envPath)) {
    const envContent = `PORT=3000\n`;
    fs.writeFileSync(envPath, envContent, "utf-8");
    console.log(chalk.blue("Created .env file"));
  } else {
    console.log(chalk.yellow(".env file already exists, skipping creation"));
  }
}

async function main() {
  const answers = await inquirer.prompt([
    {
      type: "list",
      name: "choice",
      message: "What would you like to generate:",
      choices: [
        "Basic express template",
        "Express template with router",
        "Express template with router and controllers",
      ],
    },
  ]);

  const choice = answers.choice;

  if (choice === "Basic express template") {
    const fileName = "server.template.js";
    const filePath = path.join(process.cwd(), fileName);
    const content = basicTemplate;

    fs.writeFileSync(filePath, content);
    console.log(chalk.green("Basic express template created!"));
  }

  if (choice === "Express template with router") {
    const serverFile = "server.template.js";
    const routerFile = "router.js";
    const routeFolder = "routes";

    const serverFilePath = path.join(process.cwd(), serverFile);
    const routeFolderPath = path.join(process.cwd(), routeFolder);
    const routerFilePath = path.join(routeFolderPath, routerFile);

    fs.writeFileSync(serverFilePath, serverCode2);

    if (!fs.existsSync(routeFolderPath)) {
      fs.mkdirSync(routeFolderPath, { recursive: true });
    }

    fs.writeFileSync(routerFilePath, routerCode2);

    console.log(chalk.green("Express template with router created!"));
  }

  if (choice === "Express template with router and controllers") {
    const serverFile = "server.template.js";
    const routerFile = "router.js";
    const routeFolder = "routes";
    const controllerFile = "routeController.js";
    const controllerFolder = "controllers";

    const serverFilePath = path.join(process.cwd(), serverFile);
    const routeFolderPath = path.join(process.cwd(), routeFolder);
    const controllerFolderPath = path.join(process.cwd(), controllerFolder);
    const routerFilePath = path.join(routeFolderPath, routerFile);
    const controllerFilePath = path.join(controllerFolderPath, controllerFile);

    fs.writeFileSync(serverFilePath, serverCode2); // same server code

    if (!fs.existsSync(routeFolderPath)) {
      fs.mkdirSync(routeFolderPath, { recursive: true });
    }

    if (!fs.existsSync(controllerFolderPath)) {
      fs.mkdirSync(controllerFolderPath, { recursive: true });
    }

    fs.writeFileSync(routerFilePath, routerCode3);
    fs.writeFileSync(controllerFilePath, controllerCode3);

    console.log(
      chalk.green("Express template with router and controllers created!")
    );
  }

  // Create package.json if not exists
  await createPackageJson();

  // Run npm install
  await runNpmInstall();

  // Create .env if not exists
  await createEnvFile();
}

main();
